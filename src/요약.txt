2023.09.16 
올인원 스프링 프레임워크 chapter02 예제

ch02_pjt_01 > 내가 기존에 코딩하던 방식 

	02 > DI방식 사용(의존성 주입: 객체를 외부에서 주입)
	- 01과 바뀐점
	1. MainClass의 객체에 new CalAdd가 주입됨. calculaotr.claAdd(10,5,new CalAdd()) 
	2. MyCalculator코드 간결화, 매개변수를 이용해서 외부에서 객체를 받아옴 public void calAdd (int fNum, int sNum, CalAdd calAdd) 
	3. MyCalculator 한번 더 코드 수정. public void calculate(int fNum, int sNum, ICalculator calculator) 인터페이스 객체 주입
	3-1. MainClass 변경2 calculaotr.calculate(10,5, new CalAdd())

요약 및 내가 이해한 내용
> main에서 매개변수로 CalAdd가 생성됨. 
매개변수 값들이 MyCalculator로 이동. 
MyCalculator클래스는 ICalculator 인터페이스로 이동.
인터페이스 안에 있는 doOperaion메소드는 각각 CalAdd에서 오버라이딩 되어있음.
결과적으로 재정의 된(오버라이딩 된)CalAdd를 호출해서 제대로 된 결과값을 반환.

	03 > IoC방식 사용(제어의 역전: 제어의 주체가 개발자에서 외부(스프링)으로 변경)
	- 02랑 바뀐점
	1. CalAssembler 클래스 생성. 
	1-1. MyCalculaotr calculator, CalAdd calAdd 객체 참조 변수 선언.
	1-2. public CalAssembler() { calcuator = new Calculator(); } 객체 생성
	1-3. pusblic void assemble() { calculator.calculate(10, 5, calAdd); } 객체 주입
	1-4. MainClass에서 new CalAssembler(); 만 생성.

요약 및 내가 이해한 내용
> 기존에 main 클래스에서 해야할 일을 다른 클래스에서 하도록 만듬. 
결과적으로 main클래스가 더더욱 간결화

